version: '3.8'

services:
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ontology_prometheus
    ports:
      - "9092:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - monitoring

  grafana:
    image: grafana/grafana:10.1.0
    container_name: ontology_grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=ontology_admin_2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - monitoring

  node_exporter:
    image: prom/node-exporter:v1.6.1
    container_name: ontology_node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring

  redis_exporter:
    image: oliver006/redis_exporter:v1.54.0
    container_name: ontology_redis_exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://host.docker.internal:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    restart: unless-stopped
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: ontology_alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address='
    restart: unless-stopped
    networks:
      - monitoring

  # Langfuse 서비스들 (이미 외부에서 실행 중)
  # langfuse-db:
  #   image: postgres:15
  #   container_name: ontology_langfuse_db
  #   restart: unless-stopped
  #   environment:
  #     POSTGRES_DB: langfuse
  #     POSTGRES_USER: langfuse
  #     POSTGRES_PASSWORD: langfuse_password
  #   volumes:
  #     - langfuse_db_data:/var/lib/postgresql/data
  #   networks:
  #     - monitoring

  # Langfuse (주석 처리 - 이미 외부에서 실행 중)
  # langfuse:
  #   image: langfuse/langfuse:latest
  #   container_name: ontology_langfuse
  #   depends_on:
  #     - langfuse-db
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     DATABASE_URL: postgresql://langfuse:langfuse_password@langfuse-db:5432/langfuse
  #     NEXTAUTH_URL: http://localhost:3000
  #     NEXTAUTH_SECRET: langfuse-secret-key
  #     SALT: salt-for-encryption
  #   restart: unless-stopped
  #   networks:
  #     - monitoring

volumes:
  prometheus_data:
  grafana_data:
  alertmanager_data:
  langfuse_db_data:

networks:
  monitoring:
    driver: bridge
  default:
    external:
      name: ontology_chat_default