version: '3.8'

services:
  # API 서버 (개발용)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: ontology-chat-api-dev
    ports:
      - "8000:8000"
    environment:
      - APP_HOST=0.0.0.0
      - APP_PORT=8000
      - PYTHONPATH=/app
      # Neo4j 설정 (외부 서비스)
      - NEO4J_URI=${NEO4J_URI:-neo4j://192.168.0.10:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
      - NEO4J_DATABASE=${NEO4J_DATABASE:-news-def-topology}
      # OpenSearch 설정 (외부 서비스)
      - OPENSEARCH_HOST=${OPENSEARCH_HOST:-http://192.168.0.10:9200}
      - OPENSEARCH_USER=${OPENSEARCH_USER:-admin}
      - OPENSEARCH_PASSWORD=${OPENSEARCH_PASSWORD:-admin}
      - NEWS_BULK_INDEX=${NEWS_BULK_INDEX:-news_article_bulk}
      - NEWS_EMBEDDING_INDEX=${NEWS_EMBEDDING_INDEX:-news_article_embedding}
      # OpenAI 설정
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      # Langfuse 트레이싱 설정
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY:-}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY:-}
      - LANGFUSE_HOST=${LANGFUSE_HOST:-}
      # 기타 설정
      - NEO4J_SEARCH_LOOKBACK_DAYS=${NEO4J_SEARCH_LOOKBACK_DAYS:-180}
      - NEO4J_SEARCH_DEFAULT_DOMAIN=${NEO4J_SEARCH_DEFAULT_DOMAIN:-}
      - NEO4J_SEARCH_CYPHER_FILE=${NEO4J_SEARCH_CYPHER_FILE:-api/config/graph_search.cypher}
      - GRAPH_SEARCH_KEYS=${GRAPH_SEARCH_KEYS:-}
      - OLLAMA_HOST=${OLLAMA_HOST:-http://192.168.0.11:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-qwen3:8b-q8_0}
      # Redis 설정
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
    depends_on:
      - redis
    networks:
      - ontology-network
    volumes:
      - ./api:/app/api
      - ./pyproject.toml:/app/pyproject.toml
      - ./uv.lock:/app/uv.lock
    restart: unless-stopped
    command: ["uv", "run", "uvicorn", "api.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

  # Redis (캐시 서버)
  redis:
    image: redis:7-alpine
    container_name: ontology-chat-redis-dev
    ports:
      - "6380:6379"
    volumes:
      - redis-data:/data
    networks:
      - ontology-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # UI 서버 (개발용)
  ui:
    build:
      context: .
      dockerfile: Dockerfile.ui
    container_name: ontology-chat-ui-dev
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://api:8000
      - PYTHONPATH=/app
    depends_on:
      - api
      - redis
    networks:
      - ontology-network
    volumes:
      - ./ui:/app/ui
      - ./pyproject.toml:/app/pyproject.toml
      - ./uv.lock:/app/uv.lock
    restart: unless-stopped
    command: ["uv", "run", "streamlit", "run", "ui/main.py", "--server.address", "0.0.0.0", "--server.port", "8501", "--server.runOnSave", "true"]

  # 모니터링 - Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ontology-chat-prometheus-dev
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus-data-dev:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - ontology-network
    restart: unless-stopped

  # 모니터링 - Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: ontology-chat-grafana-dev
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-dev_admin_2024}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=localhost
      - GF_SMTP_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,redis-datasource
      - GF_LOG_LEVEL=debug
    volumes:
      - grafana-data-dev:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ontology-network
    restart: unless-stopped

  # Node Exporter (시스템 메트릭)
  node_exporter:
    image: prom/node-exporter:v1.6.1
    container_name: ontology-chat-node-exporter-dev
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ontology-network
    restart: unless-stopped

  # Redis Exporter (Redis 메트릭)
  redis_exporter:
    image: oliver006/redis_exporter:v1.54.0
    container_name: ontology-chat-redis-exporter-dev
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    depends_on:
      - redis
    networks:
      - ontology-network
    restart: unless-stopped

  # Alertmanager (알림 관리)
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: ontology-chat-alertmanager-dev
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager-data-dev:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
      - '--cluster.listen-address='
    networks:
      - ontology-network
    restart: unless-stopped

  # Jaeger (분산 추적)
  jaeger:
    image: jaegertracing/all-in-one:1.49
    container_name: ontology-chat-jaeger-dev
    ports:
      - "6831:6831/udp"  # Jaeger agent thrift compact
      - "6832:6832/udp"  # Jaeger agent thrift binary
      - "5778:5778"      # Jaeger agent config endpoint
      - "16686:16686"    # Jaeger query UI
      - "14250:14250"    # Jaeger GRPC
      - "14268:14268"    # Jaeger HTTP
      - "14269:14269"    # Jaeger HTTP admin
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - ontology-network
    restart: unless-stopped



volumes:
  redis-data:
  prometheus-data-dev:
  grafana-data-dev:
  alertmanager-data-dev:

networks:
  ontology-network:
    driver: bridge
