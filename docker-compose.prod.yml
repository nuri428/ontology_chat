version: '3.8'

services:
  # API 서버 (운영용)
  api:
    build:
      context: .
      dockerfile: Dockerfile.api.prod
    container_name: ontology-chat-api-prod
    ports:
      - "8000:8000"
    environment:
      - APP_HOST=0.0.0.0
      - APP_PORT=8000
      - PYTHONPATH=/app
      - ENVIRONMENT=production
      # Neo4j 설정 (외부 서비스)
      - NEO4J_URI=${NEO4J_URI:-neo4j://192.168.0.10:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      # OpenSearch 설정 (외부 서비스)
      - OPENSEARCH_URL=${OPENSEARCH_HOST:-http://192.168.0.10:9200}
      - OPENSEARCH_USER=${OPENSEARCH_USER:-admin}
      - OPENSEARCH_PASSWORD=${OPENSEARCH_PASSWORD}
      # OpenAI 설정
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Langfuse 트레이싱 설정
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_HOST=${LANGFUSE_HOST}
      # 로깅 설정
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - OLLAMA_HOST=${OLLAMA_HOST:-http://192.168.0.11:11434}
      - OLLAMA_MODEL=${OLLAMA_MODEL:-qwen3:8b-q8_0}
    networks:
      - ontology-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # UI 서버 (운영용)
  ui:
    build:
      context: .
      dockerfile: Dockerfile.ui.prod
    container_name: ontology-chat-ui-prod
    ports:
      - "8501:8501"
    environment:
      - API_BASE_URL=http://api:8000
      - PYTHONPATH=/app
      - ENVIRONMENT=production
    depends_on:
      - api
    networks:
      - ontology-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Nginx 리버스 프록시
  nginx:
    image: nginx:alpine
    container_name: ontology-chat-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
      - ui
    networks:
      - ontology-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3


  # 모니터링 - Prometheus
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: ontology-chat-prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data_prod:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - ontology-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # 모니터링 - Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: ontology-chat-grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-prod_admin_2024}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN:-localhost}
      - GF_SERVER_ROOT_URL=https://${GRAFANA_DOMAIN:-localhost}:3000
      - GF_SMTP_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource,redis-datasource
      - GF_LOG_LEVEL=info
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_data_prod:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - ontology-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Node Exporter (시스템 메트릭)
  node_exporter:
    image: prom/node-exporter:v1.6.1
    container_name: ontology-chat-node-exporter-prod
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - ontology-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
        reservations:
          memory: 64M
          cpus: '0.05'

  # Redis Exporter (Redis 메트릭) - 외부 Redis 연결
  redis_exporter:
    image: oliver006/redis_exporter:v1.54.0
    container_name: ontology-chat-redis-exporter-prod
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=${REDIS_URL:-redis://192.168.0.10:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - ontology-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
        reservations:
          memory: 32M
          cpus: '0.05'

  # Alertmanager (알림 관리)
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: ontology-chat-alertmanager-prod
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data_prod:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=https://${ALERTMANAGER_DOMAIN:-localhost}:9093'
      - '--cluster.listen-address='
    networks:
      - ontology-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9093/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  prometheus_data_prod:
  grafana_data_prod:
  alertmanager_data_prod:

networks:
  ontology-network:
    driver: bridge
